rule "Automatic GF blinds up on Sunrise, but not before 7:00."
when
    Channel 'astro:sun:home_blinds_control:rise#event' triggered START
then
    if (AutoBlindsEnabled.state == ON && BlindsGF.state != 0) {
        BlindsGF.sendCommand(UP)
    }
end


rule "Automatic all blinds down on Sunset + 10 minutes."
when
    Channel 'astro:sun:home_blinds_control:set#event' triggered START
then
    if (AutoBlindsEnabled.state == ON) {
        Blinds.sendCommand(DOWN)
    }
end

//rule "Automatic all blinds down on Sunset + 10 minutes or 19:00."
//when
//    Channel 'astro:sun:home_blinds_control_ff:set#event' triggered START
//then
//    if (AutoBlindsEnabled.state == ON) {
//        BlindsFF.sendCommand(DOWN)
//    }
//end


rule "On sunrise, move GF blinds up if breakfast started."
when
    Channel 'astro:sun:home:rise#event' triggered START
then
    if (AutoBlindsEnabled.state == ON && Breakfast.state == ON && BlindsGF.state != 0) {
        BlindsGF.sendCommand(UP)
        BlindBedroom.sendCommand(UP)
    }
end


rule "On breakfast start, move GF blinds up if sunrise already started."
when
    Item Breakfast changed to ON
then
    val sunrise = (SunriseTime.state as DateTimeType).getZonedDateTime()
    if (AutoBlindsEnabled.state == ON && now.isAfter(sunrise) && BlindsGF.state != 0) {
        BlindsGF.sendCommand(UP)
        BlindBedroom.sendCommand(UP)
    }
end


rule "Everyday on 8:00, move the blinds in FF up."
when
    Time cron "0 0 8 1/1 * ? *"
then
    if (AutoBlindsEnabled.state == ON) {
        BlindsFF.sendCommand(UP)
    }
end

//rule "Ground room blinds down if sun is shining."
//when
//    Item WeatherStationGustSpeed changed
//then
//
//    val GUST_SPEED_THRESHOLD_2 = 60
//    val GUST_SPEED_THRESHOLD_1 = 30

//    if (WeatherStationGustSpeed.state > GUST_SPEED_THRESHOLD_2) {
//        logInfo("blinds.rules", "Wind gust speed {} over {} threshold, moving blinds UP.", WeatherStationGustSpeed.state, GUST_SPEED_THRESHOLD_2)
//        return
//    }
//    else if (WeatherStationGustSpeed.state > GUST_SPEED_THRESHOLD_1) {
//        logInfo("blinds.rules", "Wind gust speed {} over {} threshold, moving blinds little UP", WeatherStationGustSpeed.state, GUST_SPEED_THRESHOLD_1)
//        if (Blinds.state == 100) {
//            Blinds.sendCommand(90)
//            Blinds.sendCommand(UP)
//        }


//        sendHttpGetRequest("http://10.0.0.110:8090?blind_name=GROUND_ROOM&cmd=UP_A_BIT")
//        Thread::sleep(6000)
//        sendHttpGetRequest("http://10.0.0.110:8090?blind_name=GROUND_ROOM&cmd=UP_A_BIT")
//    }
//end


rule "Ground room blinds down if sun is shining."
when
    Item WeatherStationSolarRadiation changed
then

    val GUST_SPEED_THRESHOLD_2 = 60
    val GUST_SPEED_THRESHOLD_1 = 30

    if (WeatherStationGustSpeed.state > GUST_SPEED_THRESHOLD_2) {
        logInfo("blinds.rules", "Wind gust speed {} over {} threshold, moving blinds UP.", WeatherStationGustSpeed.state, GUST_SPEED_THRESHOLD_2)
        if (Blinds.state != 0) {
            Blinds.sendCommand(UP)
        }
        return
    }
    else if (WeatherStationGustSpeed.state > GUST_SPEED_THRESHOLD_1) {
        logInfo("blinds.rules", "Wind gust speed {} over {} threshold, moving blinds little UP", WeatherStationGustSpeed.state, GUST_SPEED_THRESHOLD_2)
//        return
    }

    val maxSolarRadiation = WeatherStationSolarRadiation.maximumSince(now.minusMinutes(20)).state
    val minSolarRadiation = WeatherStationSolarRadiation.minimumSince(now.minusMinutes(3)).state
    logInfo("blinds.rules", "maxSolarRadiation " + maxSolarRadiation)
    logInfo("blinds.rules", "minSolarRadiation " + minSolarRadiation)

    // Handle the cases when Sun cannot shine into windows.
    if (SunElevation.state < 12) {
        if (SunAzimuth.state < 160) {
            // Sun is rising, so do nothing.
            logInfo("blinds.rules", "Sun is rising, ignoring")
            return
        }
        else if (SunAzimuth.state > 270 && SunElevation.state > 5) {
            // Sun is setting, so move the blinds up.
            logInfo("blinds.rules", "Sun is setting, moving blinds up.")
            if (BlindGroundRoom.state != 0) {
                BlindGroundRoom.sendCommand(UP)
            }
            return
        }
        else {
            logInfo("blinds.rules", "Sun is too right, ignoring")
            return
        }
    }
    else if (SunElevation.state > 50) {
        // Sun is too high to shine into the windows.
        logInfo("blinds.rules", "Sun is too high, moving blinds up.")
        if (BlindGroundRoom.state != 0) {
            BlindGroundRoom.sendCommand(UP)
        }
        return
    }
    else if (SunAzimuth.state > 270) {
        // Sun is setting, so move the blinds up.
        logInfo("blinds.rules", "Sun is setting, moving blinds up.")
        if (BlindGroundRoom.state != 0) {
            BlindGroundRoom.sendCommand(UP)
        }
        return
    }
    else if (SunAzimuth.state < 160) {
        // Sun cannot shine to windows.
        logInfo("blinds.rules", "Sun is too left, ignoring")
        return
    }

    if (LG_TV0_Power.state == OFF && BlindLivingRoom.state != 0) {
	BlindLivingRoom.sendCommand(UP)
    }


    if (maxSolarRadiation < 270) {
        logInfo("blinds.rules", "Solar radiation below 270, moving blinds up.")
	if (BlindGroundRoom.state != 0) {
		BlindGroundRoom.sendCommand(UP)
	}
	if (BlindLivingRoom.state != 0) {
		BlindLivingRoom.sendCommand(UP)
	}
        return
    }



    if (WeatherStationSolarRadiation.state > 270 && minSolarRadiation > 260 && BlindGroundRoom.state != 100) {
        BlindGroundRoom.sendCommand(DOWN)
        Thread::sleep(42000)
    }
    if (WeatherStationSolarRadiation.state > 270 && minSolarRadiation > 260 && BlindLivingRoom.state != 50 && LG_TV0_Power.state == ON) {
        BlindLivingRoom.sendCommand(50)
    }

end
